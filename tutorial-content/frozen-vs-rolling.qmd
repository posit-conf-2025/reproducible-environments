---
title: "Getting hands on with Frozen vs Rolling R Environments"
format:
  html:
    toc: true
    toc-location: right
    toc-float: true
    toc-depth: 3
    theme: cosmo
    code-fold: false
    code-tools: true
    number-sections: true
execute:
  echo: true
  warning: false
  message: false
---

EXPECTATIONS FOR MICHAEL M:
- admiral 1.1.1 R package and it's dependencies is pre-installed in the environment
- option("repos") does not point at CRAN (in the frozen environment you can't install packages from CRAN)

# Introduction: Understanding R Environment Management

In the R ecosystem, there are two primary approaches to managing package environments: **frozen** and **rolling** environments. Understanding the differences between these approaches is crucial for reproducible research, collaboration, and maintaining stable codebases.

## What are Frozen R Environments?

**Frozen environments** use pre-installed R packages that are "locked" at specific versions. This approach prioritizes:

- **Stability**: All users work with identical package versions
- **Reproducibility**: Code runs consistently across different systems and time periods
- **Controlled updates**: Package updates happen deliberately and systematically

### Characteristics:

- Uses system-wide or containerized package installations
- Common in production environments, HPC clusters, and shared systems
- Examples: Docker containers with fixed package versions, institutional R installations

### Pros:
- High reproducibility
- Easy to cache package install step
- Reduced dependency conflicts
- Suitable for production environments

### Cons:
- Limited flexibility for individual projects
- Harder to access latest features and bug fixes
- Will become stale over time
- Often leads to scenario where updated or new packages are 'side-loaded', meaning validated cohort ends up not being used in filings.

## What are Rolling R Environments?

**Rolling environments** use package management tools like **Posit Package Manager (PPM)** and **renv** to maintain project-specific, updateable package libraries.

### Key Components:

#### Posit Package Manager (PPM)
- Provides pre-compiled binary packages for faster installation
- Offers snapshot functionality for specific dates
- Ensures package availability and consistency
- Supports both CRAN and Bioconductor packages

#### renv (R Environment Management)
- Creates isolated, project-specific package libraries
- Tracks package dependencies in a lockfile
- Enables easy sharing and restoration of environments
- Allows different projects to use different package versions

### Characteristics:
- Project-specific package libraries
- Dynamic package management
- Balances reproducibility with flexibility

### Pros:
- Project isolation
- Easy to update packages to a newer cohort of validated packages
- Access to latest features
- Flexible and customizable
- Good balance of reproducibility and currency

### Cons:
- Requires more setup and maintenance
- Potential for dependency conflicts
- Learning curve for new users
- Storage overhead (multiple package versions)

---

# Section 1: Adding a New Package

Let's explore how adding packages differs between frozen and rolling environments.

## In a Frozen Environment

In a frozen environment, adding packages typically requires:

1. **Check if the package is already installed**:
```{r eval=FALSE}
# Check you can't install new packages (no repo expected)
options("repos")

# Check if a package is available in the frozen environment
if (!require("admiral", quietly = TRUE)) {
  print("Package 'admiral' is not available in this frozen environment")
} else {
  print(paste("admiral version:", packageVersion("admiral")))
}
```

You can see `admiral` 1.1.1 is installed in our frozen environment. Normally this is great - but potentially this study wants some new feature that is not available in 1.1.1 - and they can't wait 1-6 months for the next frozen environment. 

For the purposes of this example, 

The options are:
- 'side-load' the latest admiral package - invalidating our validated environment
- Wait - but it could be 1-6 months for an update, and often those 6 month updates are often already 2-3 months out of date. 

```{r}
admiral::transform_range(
  source = c(1, 4, 3, 6, 5),
  source_range = c(1, 5),
  target_range = c(0, 100)
)
# It doesn't work! That's because this function was released after 1.1.1
```

## In a Rolling Environment (PPM + renv)

What if instead of 'baking' the validated packages into the core container that is released every 6 months, we kept the packages out of the container, and instead pulled them from Posit Package Manager snapshots? To do this we need to add in a tool 

1. **Setup PPM**:

This is currently a 'frozen' environment - so all packages are pre-installed. Let's turn it into a 'rolling environment' where the default PPM snapshot is from a time when `admiral` was at 1.1.1.

```{r eval=FALSE}
# Change repository to PPM snapshot from December 10, 2024
options(repos = c(CRAN = "https://packagemanager.posit.co/cran/2024-12-10"))

# Initialize renv for your project
renv::init()
renv::status()
```

2. **Install admiral**:
```{r eval=FALSE}
# Check if a package is available after starting renv
if (!require("admiral", quietly = TRUE)) {
  print("Package 'admiral' is not available")
} else {
  print(paste("admiral version:", packageVersion("admiral")))
}

# Install admiral from PPM into the new renv library
install.packages("admiral")

# Snapshot the current state
renv::snapshot()
```

3. **Use the new function**:
```{r}
admiral::transform_range(
  source = c(1, 4, 3, 6, 5),
  source_range = c(1, 5),
  target_range = c(0, 100)
)
```

This code is still not working - as we are pointing at the Dec 2024 snapshot of packages. Let's roll forward this study to a later snapshot and try again.

```{r eval=FALSE}
# Update PPM snapshot to today's date
options(repos = c(CRAN = "https://packagemanager.posit.co/cran/latest"))

# Update all packages to the latest snapshot
renv::restore()
renv::update()

# Install/update admiral from the latest snapshot
install.packages("admiral")

# Check the new version
packageVersion("admiral")

# Snapshot the updated environment
renv::snapshot()

# Now see if the new functionality is available
admiral::transform_range(
  source = c(1, 4, 3, 6, 5),
  source_range = c(1, 5),
  target_range = c(0, 100)
)
```

### Abstracting `renv`

GSK released an R package to the `pharmaverse` called [`slushy`](https://github.com/GSK-Biostatistics/slushy). This [PHUSE white paper](https://www.lexjansen.com/phuse-us/2025/os/PAP_OS12.pdf) has more details.
